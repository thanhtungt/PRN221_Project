using Microsoft.AspNetCore.SignalR.Client;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProjectAssWPF
{
    /*public class ChatService
    {
        private HubConnection _hubConnection;

        // Sự kiện khi nhận tin nhắn
        public event Action<string, string> OnMessageReceived;

        public async Task StartConnection(string url)
        {
            _hubConnection = new HubConnectionBuilder()
                .WithUrl(url)
                .Build();

            _hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
            {
                OnMessageReceived?.Invoke(user, message);
            });

            try
            {
                await _hubConnection.StartAsync();
                Console.WriteLine("WPF Connected to SignalR Hub.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Connection error: {ex.Message}");
            }
        }

        public async Task SendMessage(string user, string message)
        {
            if (_hubConnection != null && _hubConnection.State == HubConnectionState.Connected)
            {
                await _hubConnection.InvokeAsync("SendMessage", user, message);
            }
        }
    }*/
    public class ChatService
    {
        private readonly HubConnection _connection;

        public event Action<string, string> OnMessageReceived;

        public ChatService()
        {
            _connection = new HubConnectionBuilder()
                .WithUrl("https://localhost:5001/chathub") // URL của Hub
                .Build();

            _connection.On<string, string>("ReceiveMessage", (user, message) =>
            {
                OnMessageReceived?.Invoke(user, message);
            });
        }

        public async Task StartConnectionAsync()
        {
            await _connection.StartAsync();
        }

        public async Task SendMessage(string user, string message)
        {
            await _connection.InvokeAsync("SendMessage", user, message);
        }
    }
}
